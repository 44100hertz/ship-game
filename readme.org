* Ship
A game concept for my learning.

* Structure

** TODO love.run
 - Overriden to do updates 60 times a second always, but draw at native framerate
 - Will be added as additional mode; for now assumes 60hz and is locked

** main
 - Sets up window, does basic draw stuff
 - Loads in a state module with init, update, and draw functions
 - Provides global main.loadstate(<module>) to load in a new module
 - draw() callback expected to return a canvas

** TODO game
 - returns module to be loaded by main
 - keeps list of actors, runs callbacks on them
 - global functions:
   - actor.add(parent,actor,x,y) :: add an actor to the game
   - actor.signal(actor, code) :: send an actor a signal

** TODO actors
 - a type of table stored by game
   - new() :: return a new actor. used in actors.add
   - update() :: advance actor state by a frame
   - draw(x,y) :: draw at given coords using internal actor vals.
   - collide(actor) :: react to being collided with by given actor.
   - tangible :: true if occupies space
   - recvbox :: x,y,size circular collision box
   - sendbox :: x,y,size circular collision box
   - damage :: a damage value to be read in for collision on player, etc.
   - x,y :: position. Used by draw.

* Ship
A game concept for my learning.

* Structure

** TODO love.run
 - Overriden to do updates 60 times a second always, but draw at native framerate
 - Will be added as additional mode; for now assumes 60hz and is locked

** main
 - Sets up window, does basic draw stuff
 - Loads in a state module with init, update, and draw functions
 - Provides global main.loadstate(<module>) to load in a new module
 - draw() callback expected to return a canvas

** actors
 A table stored by game, not an actual type for inheritance
*** general
   - new() :: return a new actor. used in actors.add()
   - update() :: advance actor state by a frame
   - class :: string id for various stuff. "p1" "p2" and "enemy" is common. One id type will not collide with another, for example.
   - despawn :: if true, object is removed on next update
*** drawing
   - depth :: depth of object for drawing. Higher = later in draw order.
   - x,y :: position, transformed by drawing routines to account for scrolling
   - dx,dy :: optional, used for movement and on high fps draw
   - draw(x,y) :: draw this actor at these screen space (not game space) coords
*** collisions
   - sendbox = {x, y, size} :: collision box for others to use
   - recvbox = {x, y, size} :: collision for this. Requires collide(actor)
   - sendbox = function (recvbox) :: special collision function for non-circular
   - collide(actor) :: react to being collided with by given actor.
   - damage :: a damage value to be read in for collision on player, etc.
